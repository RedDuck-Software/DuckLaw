@using Duck.Shared.Response
@using Duck.Shared.Requests
@inject Duck.Client.Service.IService Service
@inject IJSRuntime JsRuntime

<h1>&#8595; Search Result &#8595;</h1>

@if (Loading)
{
    <div class="d-flex justify-content-center spinner-middle-of-the-screen">
        <div class="spinner-border text-danger spinner-size-5" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="center col-sm-12 col-md-10">
        <table class="table">
            <thead>
            <tr>
                <th>№ рішення</th>
                <th>Форма судового рішення</th>
                <th>Дата ухвалення рішення</th>
                <th>Дата набрання законної сили</th>
                <th>Форма судочинства</th>
                <th>№ судової справи</th>
                <th>Назва суду</th>
                <th>Суддя</th>
            </tr>
            </thead>

            <tbody>
            @if (CourtSearchResults?.Items != null)
            {
                @foreach (var row in CourtSearchResults?.Items)
                {
                    <tr>
                        <th scope="row"><a href="Result">@row.DocId</a></th>
                        <td>@row.JusticeName</td>
                        <td>@row.ReceiptDate.Split(' ').First()</td>
                        <td>@row.AdjudicationDate.Split(' ').First()</td>
                        <td>@row.JudgmentName</td>
                        <td>@row.CauseNumber</td>
                        <td>@row.CourtName</td>
                        <td>@row.Judge</td>
                    </tr>
                }
            }
            </tbody>
        </table>
    </div>
}



@code {
    [Parameter]
    public CourtSearchRequest CourtSearchRequest { get; set; }

    private CourtSearchResultsResponse CourtSearchResults { get; set; } = new();

    private bool _loading;

    private bool Loading
    {
        get => _loading;
        set
        {
            _loading = value;
            if (!_loading)
            {
                JsRuntime.InvokeVoidAsync("scroll", 0, 1_000_000);
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        Loading = true;

        CourtSearchResults = await Service.SearchCourt(CourtSearchRequest);
        StateHasChanged();

        Loading = false;
    }
}